//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { CallsEntity } from './db/Calls.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, CallsEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Calls: [
        {
          CallID: 1,
          CallerNumber: 'CallerNumber 1',
          ReceiverNumber: 'ReceiverNumber 1',
          StartTime: '2024-10-02T22:48:41.902Z',
          EndTime: '2023-10-14T03:43:50.665Z',
          Status: 'Status 1',
          id: 91,
        },
        {
          CallID: 2,
          CallerNumber: 'CallerNumber 2',
          ReceiverNumber: 'ReceiverNumber 2',
          StartTime: '2024-04-20T15:28:00.468Z',
          EndTime: '2024-02-05T06:59:59.488Z',
          Status: 'Status 2',
          id: 95,
        },
        {
          CallID: 3,
          CallerNumber: 'CallerNumber 3',
          ReceiverNumber: 'ReceiverNumber 3',
          StartTime: '2023-11-18T22:29:26.188Z',
          EndTime: '2023-11-09T21:22:36.314Z',
          Status: 'Status 3',
          id: 95,
        },
        {
          CallID: 4,
          CallerNumber: 'CallerNumber 4',
          ReceiverNumber: 'ReceiverNumber 4',
          StartTime: '2024-01-03T20:57:21.438Z',
          EndTime: '2024-01-03T03:20:55.592Z',
          Status: 'Status 4',
          id: 21,
        },
        {
          CallID: 5,
          CallerNumber: 'CallerNumber 5',
          ReceiverNumber: 'ReceiverNumber 5',
          StartTime: '2023-05-28T16:54:11.453Z',
          EndTime: '2023-07-01T21:00:36.190Z',
          Status: 'Status 5',
          id: 3,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('CallsEntity', data.Calls);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
